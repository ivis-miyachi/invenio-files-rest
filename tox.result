GLOB sdist-make: /code/modules/invenio-files-rest/setup.py
c1 inst-nodeps: /code/modules/invenio-files-rest/.tox/.tmp/package/1/invenio-files-rest-1.0.1.zip
c1 installed: alabaster==0.7.13,alembic==0.9.6,amqp==2.6.0,angular-gettext-babel==0.3,aniso8601==8.0.0,arrow==0.12.1,asn1crypto==0.23.0,atomicwrites==1.4.1,attrs==17.4.0,b2handle==1.1.2,Babel==2.5.1,bagit==1.7.0,beautifulsoup4==4.9.3,bibtexparser==1.0.1,billiard==3.6.3.0,binaryornot==0.4.4,bleach==3.1.0,blinker==1.4,boto3==1.7.84,botocore==1.10.84,cachelib==0.1,cachetools==4.2.4,cchardet==2.1.1,celery==4.4.4,certifi==2017.11.5,cffi==1.11.2,chardet==3.0.4,citeproc-py==0.5.1,citeproc-py-styles==0.1.2,click==6.7,cookiecutter==1.6.0,counter-robots==2018.6,coverage==6.2,cryptography==2.1.4,datacite==1.0.1,DateTime==4.9,decorator==4.1.2,defusedxml==0.5.0,dictdiffer==0.7.0,distlib==0.3.6,dnspython==2.2.1,docutils==0.18.1,dojson==1.3.2,elasticsearch==6.1.1,elasticsearch-dsl==6.4.0,elementpath==1.0.6,email-validator==1.0.5,entrypoints==0.2.3,feedgen==0.7.0,filelock==3.4.1,Flask==1.1.0,Flask-Admin==1.5.3,Flask-Alembic==2.0.1,Flask-Assets==0.12,Flask-BabelEx==0.9.4,Flask-Breadcrumbs==0.5.0,Flask-Caching==1.10.1,Flask-CeleryExt==0.3.4,Flask-Collect==1.2.2,Flask-Cors==3.0.3,Flask-DebugToolbar==0.13.1,Flask-IIIF==0.6.1,Flask-KVSession==0.6.2,Flask-Limiter==1.1.0,Flask-Login==0.4.1,Flask-Mail==0.9.1,flask-marshmallow==0.14.0,Flask-Menu==0.6.0,-e git+https://github.com/RCOSDP/flask-oauthlib.git@98eb36e1dfc66256fa7ea62237e9879acb906e9d#egg=Flask_OAuthlib,Flask-Plugins==1.6.1,Flask-Principal==0.4.0,Flask-RESTful==0.3.8,Flask-Security==3.0.0,flask-shell-ipython==0.4.1,Flask-Sitemap==0.4.0,Flask-SQLAlchemy==2.3.2,flask-talisman==0.4.1,Flask-WTF==0.14.3,-e git+https://github.com/RCOSDP/pyfpdf.git@f9b032148283d535cabc7789858081c80de36fef#egg=fpdf,frozendict==2.3.8,fs==0.5.4,ftfy==4.4.3,future==0.16.0,github3.py==1.1.0,html5lib==1.0.1,idna==2.6,iiif-prezi==0.3.0,imagesize==1.4.1,importlib-metadata==4.8.3,importlib-resources==5.4.0,infinity==1.4,intervals==0.8.0,invenio-access==1.1.0,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=invenio_accounts&subdirectory=modules/invenio-accounts,invenio-admin==1.1.2,invenio-app==1.1.0,invenio-assets==1.0.0,invenio-base==1.0.2,invenio-cache==1.0.0,invenio-celery==1.1.3,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=invenio_communities&subdirectory=modules/invenio-communities,invenio-config==1.0.0,invenio-csl-rest==1.0.0a1,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=invenio_db&subdirectory=modules/invenio-db,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=invenio_deposit&subdirectory=modules/invenio-deposit,invenio-files-rest @ file:///code/modules/invenio-files-rest/.tox/.tmp/package/1/invenio-files-rest-1.0.1.zip,invenio-formatter==1.0.0b3,invenio-i18n==1.0.0,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=invenio_iiif&subdirectory=modules/invenio-iiif,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=invenio_indexer&subdirectory=modules/invenio-indexer,invenio-jsonschemas==1.0.0,invenio-logging==1.0.0b3,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=invenio_mail&subdirectory=modules/invenio-mail,invenio-marc21==1.0.0a8,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=invenio_oaiharvester&subdirectory=modules/invenio-oaiharvester,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=invenio_oaiserver&subdirectory=modules/invenio-oaiserver,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=invenio_oauth2server&subdirectory=modules/invenio-oauth2server,invenio-oauthclient==1.0.0,invenio-pidrelations==1.0.0a4,invenio-pidstore==1.0.0,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=invenio_previewer&subdirectory=modules/invenio-previewer,invenio-query-parser==0.6.0,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=invenio_queues&subdirectory=modules/invenio-queues,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=invenio_records&subdirectory=modules/invenio-records,invenio-records-files==1.0.0a10,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=invenio_records_rest&subdirectory=modules/invenio-records-rest,invenio-records-ui==1.0.0,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=invenio_resourcesyncclient&subdirectory=modules/invenio-resourcesyncclient,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=invenio_resourcesyncserver&subdirectory=modules/invenio-resourcesyncserver,invenio-rest==1.1.2,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=invenio_s3&subdirectory=modules/invenio-s3,-e git+https://github.com/RCOSDP/invenio-search.git@cff9744c5dc651893a9c51672c5b8da9adc21e16#egg=invenio_search,-e git+https://github.com/RCOSDP/invenio-search-ui.git@74bd3b2990ff27b39e01b6b31be9a0b5fda3dd0f#egg=invenio_search_ui,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=invenio_stats&subdirectory=modules/invenio-stats,invenio-theme==1.0.0b4,ipaddress==1.0.19,ipython==6.2.1,ipython-genutils==0.2.0,itsdangerous==0.24,jedi==0.11.0,Jinja2==2.10.1,jinja2-cli==0.6.0,jinja2-time==0.2.0,jmespath==0.10.0,jsmin==2.2.2,jsonpatch==1.21,jsonpath-ng==1.5.2,jsonpointer==1.14,jsonref==0.1,jsonresolver==0.2.1,jsonschema==2.6.0,jupyter-client==5.2.2,jupyter-core==4.4.0,-e git+https://github.com/RCOSDP/kombu.git@f204fdf078d5e94393c86693f545e2d011f620f5#egg=kombu,limits==1.2.1,lxml==4.1.1,Mako==1.0.7,MarkupSafe==1.1.1,marshmallow==2.20.1,marshmallow-sqlalchemy==0.23.1,maxminddb==1.5.2,maxminddb-geolite2==2017.803,mistune==0.8.3,mock==5.0.2,more-itertools==8.10.0,msgpack==0.6.2,nbconvert==5.3.1,nbformat==4.4.0,netaddr==0.8.0,node-semver==0.1.1,numpy==1.16.1,oauthlib==2.1.0,ordereddict==1.1,packaging==21.3,pandocfilters==1.4.2,parso==0.1.0,passlib==1.7.1,pbr==5.11.1,pexpect==4.3.0,pickleshare==0.7.4,Pillow==5.4.1,platformdirs==2.4.0,pluggy==0.13.1,ply==3.11,poyo==0.4.1,prompt-toolkit==1.0.15,psycopg2==2.7.3.2,ptyprocess==0.5.2,py==1.11.0,pycparser==2.18,Pygments==2.2.0,PyJWT==1.5.3,PyLD==2.0.3,pyparsing==3.1.0,-e git+https://github.com/RCOSDP/PyPDF2.git@fefc684a3a74aff6f99e5dff24f9b4dd1c95169d#egg=PyPDF2,pyPEG2==2.15.2,pytest==4.2.0,pytest-cov==2.9.0,python-dateutil==2.6.1,python-editor==1.0.3,python-geoip==1.2,pytz==2017.3,pyzmq==17.0.0,redis==2.10.6,requests==2.18.4,requests-oauthlib==1.1.0,resync==1.0.9,s3fs==0.1.6,s3transfer==0.1.13,selenium==3.141.0,Sickle==0.6.4,simplegeneric==0.8.1,simplejson==3.12.0,simplekv==0.11.2,six==1.16.0,snowballstemmer==2.2.0,soupsieve==2.3.2.post1,speaklater==1.3,Sphinx==1.8.4,sphinxcontrib-serializinghtml==1.1.5,sphinxcontrib-websupport==1.2.4,SQLAlchemy==1.2.19,SQLAlchemy-Continuum==1.3.6,SQLAlchemy-Utils==0.35.0,stevedore==3.5.2,sword3common==0.1.1,testpath==0.3.1,tika==2.6.0,toml==0.10.2,tornado==4.5.3,tox==3.28.0,traitlets==4.3.2,typing_extensions==4.1.1,ua-parser==0.7.3,uritemplate==4.1.1,uritools==2.1.0,urllib3==1.22,uWSGI==2.0.21,uwsgitop==0.11,validators==0.12.0,vine==1.3.0,virtualenv==20.17.1,virtualenv-clone==0.5.7,virtualenvwrapper==4.8.4,Wand==0.6.1,wcwidth==0.1.7,webargs==5.5.2,webassets==0.12.1,webencodings==0.5.1,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=weko_accounts&subdirectory=modules/weko-accounts,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=weko_admin&subdirectory=modules/weko-admin,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=weko_authors&subdirectory=modules/weko-authors,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=weko_bulkupdate&subdirectory=modules/weko-bulkupdate,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=weko_deposit&subdirectory=modules/weko-deposit,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=weko_gridlayout&subdirectory=modules/weko-gridlayout,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=weko_groups&subdirectory=modules/weko-groups,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=weko_handle&subdirectory=modules/weko-handle,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=weko_index_tree&subdirectory=modules/weko-index-tree,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=weko_indextree_journal&subdirectory=modules/weko-indextree-journal,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=weko_items_autofill&subdirectory=modules/weko-items-autofill,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=weko_items_ui&subdirectory=modules/weko-items-ui,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=weko_itemtypes_ui&subdirectory=modules/weko-itemtypes-ui,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=weko_logging&subdirectory=modules/weko-logging,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=weko_records&subdirectory=modules/weko-records,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=weko_records_ui&subdirectory=modules/weko-records-ui,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=weko_redis&subdirectory=modules/weko-redis,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=weko_schema_ui&subdirectory=modules/weko-schema-ui,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=weko_search_ui&subdirectory=modules/weko-search-ui,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=weko_sitemap&subdirectory=modules/weko-sitemap,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=weko_swordserver&subdirectory=modules/weko-swordserver,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=weko_theme&subdirectory=modules/weko-theme,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=weko_user_profiles&subdirectory=modules/weko-user-profiles,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=weko_workflow&subdirectory=modules/weko-workflow,Werkzeug==0.15.2,whichcraft==0.4.1,WTForms==2.1,WTForms-Alchemy==0.16.5,WTForms-Components==0.10.3,xmlschema==0.9.30,xmltodict==0.12.0,zipp==3.6.0,zope.interface==5.5.2
c1 run-test-pre: PYTHONHASHSEED='1653148269'
c1 run-test: commands[0] | pytest --cov=invenio_files_rest tests -v --cov-branch --cov-report=term --cov-report=xml --cov-report=html --basetemp=/code/modules/invenio-files-rest/.tox/c1/tmp
============================= test session starts ==============================
platform linux -- Python 3.6.15, pytest-4.2.0, py-1.11.0, pluggy-0.13.1 -- /code/modules/invenio-files-rest/.tox/c1/bin/python
cachedir: .tox/c1/.pytest_cache
rootdir: /code/modules/invenio-files-rest, inifile:
plugins: celery-4.4.4, cov-2.9.0
collecting ... collected 152 items

tests/test_admin.py::test_require_slug PASSED                            [  0%]
tests/test_admin.py::test_admin_views PASSED                             [  1%]
tests/test_cli.py::test_simple_workflow SKIPPED                          [  1%]
tests/test_examples_app.py::test_example_app SKIPPED                     [  2%]
tests/test_helpers.py::test_make_path PASSED                             [  3%]
tests/test_invenio_files_rest.py::test_version PASSED                    [  3%]
tests/test_invenio_files_rest.py::test_init PASSED                       [  4%]
tests/test_limiters.py::test_file_size_limit_comparisons PASSED          [  5%]
tests/test_models.py::test_location PASSED                               [  5%]
tests/test_models.py::test_location_default PASSED                       [  6%]
tests/test_models.py::test_location_validation PASSED                    [  7%]
tests/test_models.py::test_bucket_removal PASSED                         [  7%]
tests/test_models.py::test_bucket_kwargs_creation PASSED                 [  8%]
tests/test_models.py::test_bucket_create_object PASSED                   [  9%]
tests/test_models.py::test_bucket_retrieval PASSED                       [  9%]
tests/test_models.py::test_object_create PASSED                          [ 10%]
tests/test_models.py::test_object_create_with_fileid PASSED              [ 11%]
tests/test_models.py::test_object_multibucket PASSED                     [ 11%]
tests/test_models.py::test_object_get_by_bucket PASSED                   [ 12%]
tests/test_models.py::test_object_delete PASSED                          [ 13%]
tests/test_models.py::test_object_remove PASSED                          [ 13%]
tests/test_models.py::test_object_remove_marker PASSED                   [ 14%]
tests/test_models.py::test_object_set_contents PASSED                    [ 15%]
tests/test_models.py::test_object_set_location PASSED                    [ 15%]
tests/test_models.py::test_object_snapshot PASSED                        [ 16%]
tests/test_models.py::test_object_snapshot_deleted PASSED                [ 17%]
tests/test_models.py::test_bucket_sync_new_object PASSED                 [ 17%]
tests/test_models.py::test_bucket_sync_same_object PASSED                [ 18%]
tests/test_models.py::test_bucket_sync_deleted_object PASSED             [ 19%]
tests/test_models.py::test_bucket_sync_delete_extras PASSED              [ 19%]
tests/test_models.py::test_bucket_sync PASSED                            [ 20%]
tests/test_models.py::test_bucket_sync_deleted PASSED                    [ 21%]
tests/test_models.py::test_object_copy PASSED                            [ 21%]
tests/test_models.py::test_object_set_file PASSED                        [ 22%]
tests/test_models.py::test_object_mimetype PASSED                        [ 23%]
tests/test_models.py::test_object_restore PASSED                         [ 23%]
tests/test_models.py::test_object_relink_all PASSED                      [ 24%]
tests/test_models.py::test_object_validation PASSED                      [ 25%]
tests/test_models.py::test_bucket_tags PASSED                            [ 25%]
tests/test_models.py::test_fileinstance_get PASSED                       [ 26%]
tests/test_models.py::test_fileinstance_get_by_uri PASSED                [ 26%]
tests/test_models.py::test_fileinstance_create PASSED                    [ 27%]
tests/test_models.py::test_fileinstance_set_contents PASSED              [ 28%]
tests/test_models.py::test_fileinstance_copy_contents PASSED             [ 28%]
tests/test_models.py::test_fileinstance_copy_contents_invalid PASSED     [ 29%]
tests/test_models.py::test_fileinstance_send_file ERROR                  [ 30%]
tests/test_models.py::test_fileinstance_validation PASSED                [ 30%]
tests/test_models.py::test_object_version_tags PASSED                    [ 31%]
tests/test_models_multipart.py::test_multipart_creation PASSED           [ 32%]
tests/test_models_multipart.py::test_multipart_last_part PASSED          [ 32%]
tests/test_models_multipart.py::test_part_creation PASSED                [ 33%]
tests/test_models_multipart.py::test_multipart_full PASSED               [ 34%]
tests/test_request.py::test_max_content_length PASSED                    [ 34%]
tests/test_serializer.py::test_serialize_pretty PASSED                   [ 35%]
tests/test_storage.py::test_storage_interface PASSED                     [ 36%]
tests/test_storage.py::test_pyfs_initialize PASSED                       [ 36%]
tests/test_storage.py::test_pyfs_delete PASSED                           [ 37%]
tests/test_storage.py::test_pyfs_delete_fail PASSED                      [ 38%]
tests/test_storage.py::test_pyfs_save PASSED                             [ 38%]
tests/test_storage.py::test_pyfs_save_failcleanup PASSED                 [ 39%]
tests/test_storage.py::test_pyfs_save_callback PASSED                    [ 40%]
tests/test_storage.py::test_pyfs_save_limits PASSED                      [ 40%]
tests/test_storage.py::test_pyfs_update PASSED                           [ 41%]
tests/test_storage.py::test_pyfs_update_fail PASSED                      [ 42%]
tests/test_storage.py::test_pyfs_checksum PASSED                         [ 42%]
tests/test_storage.py::test_pyfs_checksum_fail PASSED                    [ 43%]
tests/test_storage.py::test_pyfs_send_file PASSED                        [ 44%]
tests/test_storage.py::test_pyfs_send_file_for_download PASSED           [ 44%]
tests/test_storage.py::test_pyfs_send_file_xss_prevention PASSED         [ 45%]
tests/test_storage.py::test_pyfs_send_file_fail PASSED                   [ 46%]
tests/test_storage.py::test_pyfs_copy PASSED                             [ 46%]
tests/test_storage.py::test_non_unicode_filename PASSED                  [ 47%]
tests/test_tasks.py::test_verify_checksum PASSED                         [ 48%]
tests/test_tasks.py::test_schedule_checksum_verification PASSED          [ 48%]
tests/test_tasks.py::test_migrate_file PASSED                            [ 49%]
tests/test_tasks.py::test_migrate_file_copyfail PASSED                   [ 50%]
tests/test_tasks.py::test_remove_file_data PASSED                        [ 50%]
tests/test_views_bucket.py::test_head FAILED                             [ 51%]
tests/test_views_bucket.py::test_head_locked_deleted PASSED              [ 51%]
tests/test_views_bucket.py::test_get FAILED                              [ 52%]
tests/test_views_bucket.py::test_get_versions FAILED                     [ 53%]
tests/test_views_bucket.py::test_get_empty_bucket FAILED                 [ 53%]
tests/test_views_location.py::test_post_bucket[None-401] PASSED          [ 54%]
tests/test_views_location.py::test_post_bucket[auth-403] PASSED          [ 55%]
tests/test_views_location.py::test_post_bucket[location-200] PASSED      [ 55%]
tests/test_views_location.py::test_post_fail PASSED                      [ 56%]
tests/test_views_location.py::test_get_location[None-405] PASSED         [ 57%]
tests/test_views_location.py::test_get_location[auth-405] PASSED         [ 57%]
tests/test_views_location.py::test_get_location[location-405] PASSED     [ 58%]
tests/test_views_multipart.py::test_post_init[None-404] PASSED           [ 59%]
tests/test_views_multipart.py::test_post_init[auth-404] PASSED           [ 59%]
tests/test_views_multipart.py::test_post_init[objects-404] PASSED        [ 60%]
tests/test_views_multipart.py::test_post_init[bucket-200] PASSED         [ 61%]
tests/test_views_multipart.py::test_post_init[location-200] PASSED       [ 61%]
tests/test_views_multipart.py::test_post_init_fail PASSED                [ 62%]
tests/test_views_multipart.py::test_post_init_querystring PASSED         [ 63%]
tests/test_views_multipart.py::test_get_init_not_allowed PASSED          [ 63%]
tests/test_views_multipart.py::test_post_invalid_partsizes FAILED        [ 64%]
tests/test_views_multipart.py::test_post_size_limits FAILED              [ 65%]
tests/test_views_multipart.py::test_post_locked_bucket FAILED            [ 65%]
tests/test_views_multipart.py::test_post_invalidkey FAILED               [ 66%]
tests/test_views_multipart.py::test_put FAILED                           [ 67%]
tests/test_views_multipart.py::test_put_not_found PASSED                 [ 67%]
tests/test_views_multipart.py::test_put_wrong_sizes PASSED               [ 68%]
tests/test_views_multipart.py::test_put_ngfileupload PASSED              [ 69%]
tests/test_views_multipart.py::test_put_invalid_part_number PASSED       [ 69%]
tests/test_views_multipart.py::test_put_completed_multipart PASSED       [ 70%]
tests/test_views_multipart.py::test_put_badstream FAILED                 [ 71%]
tests/test_views_multipart.py::test_get FAILED                           [ 71%]
tests/test_views_multipart.py::test_get_empty PASSED                     [ 72%]
tests/test_views_multipart.py::test_get_serialization PASSED             [ 73%]
tests/test_views_multipart.py::test_post_complete[None-404] PASSED       [ 73%]
tests/test_views_multipart.py::test_post_complete[auth-404] PASSED       [ 74%]
tests/test_views_multipart.py::test_post_complete[objects-404] PASSED    [ 75%]
tests/test_views_multipart.py::test_post_complete[bucket-200] FAILED     [ 75%]
tests/test_views_multipart.py::test_post_complete[location-200] FAILED   [ 76%]
tests/test_views_multipart.py::test_post_complete_fail PASSED            [ 76%]
tests/test_views_multipart.py::test_post_complete_timeout PASSED         [ 77%]
tests/test_views_multipart.py::test_delete FAILED                        [ 78%]
tests/test_views_multipart.py::test_delete_invalid PASSED                [ 78%]
tests/test_views_multipart.py::test_delete_init_not_allowed PASSED       [ 79%]
tests/test_views_multipart.py::test_get_listuploads FAILED               [ 80%]
tests/test_views_multipart.py::test_already_exhausted_input_stream FAILED [ 80%]
tests/test_views_objectversion.py::test_get_not_found PASSED             [ 81%]
tests/test_views_objectversion.py::test_get PASSED                       [ 82%]
tests/test_views_objectversion.py::test_get_download PASSED              [ 82%]
tests/test_views_objectversion.py::test_last_modified_utc_conversion PASSED [ 83%]
tests/test_views_objectversion.py::test_get_unreadable_file PASSED       [ 84%]
tests/test_views_objectversion.py::test_get_versions PASSED              [ 84%]
tests/test_views_objectversion.py::test_get_versions_invalid PASSED      [ 85%]
tests/test_views_objectversion.py::test_post FAILED                      [ 86%]
tests/test_views_objectversion.py::test_put[None-404] PASSED             [ 86%]
tests/test_views_objectversion.py::test_put[auth-404] PASSED             [ 87%]
tests/test_views_objectversion.py::test_put[objects-404] PASSED          [ 88%]
tests/test_views_objectversion.py::test_put[bucket-200] PASSED           [ 88%]
tests/test_views_objectversion.py::test_put[location-200] PASSED         [ 89%]
tests/test_views_objectversion.py::test_put_fail PASSED                  [ 90%]
tests/test_views_objectversion.py::test_put_versioning FAILED            [ 90%]
tests/test_views_objectversion.py::test_put_file_size_errors[50-100-400-Bucket quota] PASSED [ 91%]
tests/test_views_objectversion.py::test_put_file_size_errors[100-50-400-Maximum file size] PASSED [ 92%]
tests/test_views_objectversion.py::test_put_file_size_errors[100-100-200-None] PASSED [ 92%]
tests/test_views_objectversion.py::test_put_file_size_errors[None-None-200-None] PASSED [ 93%]
tests/test_views_objectversion.py::test_put_invalid_key FAILED           [ 94%]
tests/test_views_objectversion.py::test_put_zero_size PASSED             [ 94%]
tests/test_views_objectversion.py::test_put_deleted_locked FAILED        [ 95%]
tests/test_views_objectversion.py::test_put_error FAILED                 [ 96%]
tests/test_views_objectversion.py::test_put_multipartform PASSED         [ 96%]
tests/test_views_objectversion.py::test_delete_versions_head_reset PASSED [ 97%]
tests/test_views_objectversion.py::test_delete_locked_deleted PASSED     [ 98%]
tests/test_views_objectversion.py::test_delete_unwritable PASSED         [ 98%]
tests/test_views_objectversion.py::test_put_header_tags FAILED           [ 99%]
tests/test_views_objectversion.py::test_put_header_invalid_tags FAILED   [100%]

==================================== ERRORS ====================================
________________ ERROR at setup of test_fileinstance_send_file _________________
file /code/modules/invenio-files-rest/tests/test_models.py, line 918
  def test_fileinstance_send_file(app, db, dummy_location,dummy_s3_location,mocker):
E       fixture 'mocker' not found
>       available fixtures: admin_user, app, base_app, bucket, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, celery_app, celery_config, celery_enable_logging, celery_includes, celery_parameters, celery_session_app, celery_session_worker, celery_worker, celery_worker_parameters, celery_worker_pool, client, cov, db, depends_on_current_app, doctest_namespace, dummy_location, dummy_s3_location, extra_location, get_json, get_md5, get_sha256, headers, monkeypatch, multipart, multipart_url, no_cover, objects, parts, permissions, pyfs, pyfs_testpath, pytestconfig, record_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, use_celery_app_trap, users, users_data, versions
>       use 'pytest --fixtures [testpath]' for help on them.

/code/modules/invenio-files-rest/tests/test_models.py:918
=================================== FAILURES ===================================
__________________________________ test_head ___________________________________

client = <FlaskClient <Flask 'testapp'>>
headers = {'Accept': '*/*', 'Content-Type': 'application/json'}
bucket = <[DetachedInstanceError("Instance <Bucket at 0x7fe8e2481ef0> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)") raised in repr()] Bucket object at 0x7fe8e2481ef0>
permissions = {None: None, 'auth': <User 1>, 'location': <User 2>, 'bucket': <User 3>, ...}

    def test_head(client, headers, bucket, permissions):
        """Test checking existence of bucket."""
        cases = [
            (None, 404),
            ('auth', 404),
            ('objects', 404),  # TODO - return 403 instead
            ('bucket', 200),
            ('location', 200),
        ]
    
        for user, expected in cases:
>           login_user(client, permissions[user])

tests/test_views_bucket.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/testutils.py:26: in login_user
    sess['user_id'] = user.id if user else None
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7fe917caa4e0; User>
state = <sqlalchemy.orm.state.InstanceState object at 0x7fe8e2481c18>
attribute_names = {'active', 'confirmed_at', 'current_login_at', 'current_login_ip', 'email', 'id', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <User at 0x7fe8e25159b0> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
___________________________________ test_get ___________________________________

client = <FlaskClient <Flask 'testapp'>>
headers = {'Accept': '*/*', 'Content-Type': 'application/json'}
permissions = {None: None, 'auth': <User 1>, 'location': <User 2>, 'bucket': <User 3>, ...}
bucket = <[DetachedInstanceError("Instance <Bucket at 0x7fe8e218f630> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)") raised in repr()] Bucket object at 0x7fe8e218f630>
objects = [<[DetachedInstanceError("Instance <ObjectVersion at 0x7fe8e21a57f0> is not bound to a Session; attribute refresh oper...d (Background on this error at: http://sqlalche.me/e/bhk3)") raised in repr()] ObjectVersion object at 0x7fe8e21abba8>]
get_json = <function get_json.<locals>.inner at 0x7fe8e23807b8>

    def test_get(client, headers, permissions, bucket, objects, get_json):
        """Test listing objects."""
        cases = [
            (None, 404),
            ('auth', 404),
            ('objects', 404),  # TODO - return 403 instead
            ('bucket', 200),
            ('location', 200),
        ]
    
        for user, expected in cases:
>           login_user(client, permissions[user])

tests/test_views_bucket.py:74: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/testutils.py:26: in login_user
    sess['user_id'] = user.id if user else None
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7fe917caa4e0; User>
state = <sqlalchemy.orm.state.InstanceState object at 0x7fe8e218f320>
attribute_names = {'active', 'confirmed_at', 'current_login_at', 'current_login_ip', 'email', 'id', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <User at 0x7fe8e218f588> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
______________________________ test_get_versions _______________________________

client = <FlaskClient <Flask 'testapp'>>
headers = {'Accept': '*/*', 'Content-Type': 'application/json'}
permissions = {None: None, 'auth': <User 1>, 'location': <User 2>, 'bucket': <User 3>, ...}
bucket = <[DetachedInstanceError("Instance <Bucket at 0x7fe8e2121860> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)") raised in repr()] Bucket object at 0x7fe8e2121860>
objects = [<[DetachedInstanceError("Instance <ObjectVersion at 0x7fe8e212fbe0> is not bound to a Session; attribute refresh oper...d (Background on this error at: http://sqlalche.me/e/bhk3)") raised in repr()] ObjectVersion object at 0x7fe8e213f8d0>]
get_json = <function get_json.<locals>.inner at 0x7fe8e2085ea0>

    def test_get_versions(client, headers, permissions, bucket, objects, get_json):
        """Test listing objects."""
        cases = [
            (None, 404),
            ('auth', 404),
            ('bucket', 403),  # User already knowns bucket exists.
            ('objects', 404),  # TODO - return 403 instead
            ('location', 200),
        ]
    
        for user, expected in cases:
>           login_user(client, permissions[user])

tests/test_views_bucket.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/testutils.py:26: in login_user
    sess['user_id'] = user.id if user else None
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7fe917caa4e0; User>
state = <sqlalchemy.orm.state.InstanceState object at 0x7fe8e2121550>
attribute_names = {'active', 'confirmed_at', 'current_login_at', 'current_login_ip', 'email', 'id', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <User at 0x7fe8e2121518> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
____________________________ test_get_empty_bucket _____________________________

db = <SQLAlchemy engine=postgresql+psycopg2://invenio:***@postgresql:5432/wekotest>
client = <FlaskClient <Flask 'testapp'>>
headers = {'Accept': '*/*', 'Content-Type': 'application/json'}
bucket = <[DetachedInstanceError("Instance <Bucket at 0x7fe8e1ff2cc0> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)") raised in repr()] Bucket object at 0x7fe8e1ff2cc0>
objects = [<[DetachedInstanceError("Instance <ObjectVersion at 0x7fe8e1f81a58> is not bound to a Session; attribute refresh oper...d (Background on this error at: http://sqlalche.me/e/bhk3)") raised in repr()] ObjectVersion object at 0x7fe8e1f813c8>]
permissions = {None: None, 'auth': <User 1>, 'location': <User 2>, 'bucket': <User 3>, ...}
get_json = <function get_json.<locals>.inner at 0x7fe8e1f17d08>

    def test_get_empty_bucket(db, client, headers, bucket, objects, permissions,
                              get_json):
        """Test getting objects from an empty bucket."""
        # Delete the objects created in the fixtures to have an empty bucket with
        # permissions set up.
        for obj in objects:
            ObjectVersion.delete(obj.bucket_id, obj.key)
        db.session.commit()
    
        cases = [
            (None, 404),
            ('auth', 404),
            ('objects', 404),  # TODO - return 403 instead
            ('bucket', 200),
            ('location', 200),
        ]
    
        for user, expected in cases:
>           login_user(client, permissions[user])

tests/test_views_bucket.py:148: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/testutils.py:26: in login_user
    sess['user_id'] = user.id if user else None
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7fe917caa4e0; User>
state = <sqlalchemy.orm.state.InstanceState object at 0x7fe8e1ff2d68>
attribute_names = {'active', 'confirmed_at', 'current_login_at', 'current_login_ip', 'email', 'id', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <User at 0x7fe8e1ff24a8> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
_________________________ test_post_invalid_partsizes __________________________

client = <FlaskClient <Flask 'testapp'>>
headers = {'Accept': '*/*', 'Content-Type': 'application/json'}
bucket = e3941495-d86f-436d-8515-99db8fb61a6a
get_json = <function get_json.<locals>.inner at 0x7fe8e0b01620>
admin_user = <User 1>

    def test_post_invalid_partsizes(client, headers, bucket, get_json, admin_user):
        """Test invalid multipart init."""
        login_user(client, admin_user)
    
        # Part size too large
        res = client.post(
            obj_url(bucket), query_string='uploads', headers=headers,
>           data=json.dumps({'size': 30, 'partSize': 21}))

tests/test_views_multipart.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask/views.py:89: in view
    return self.dispatch_request(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/invenio_rest/views.py:240: in dispatch_request
    *args, **kwargs
.tox/c1/lib/python3.6/site-packages/flask/views.py:163: in dispatch_request
    return meth(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/webargs/core.py:455: in wrapper
    return func(*args, **kwargs)
invenio_files_rest/views.py:285: in decorate
    return f(bucket=bucket, *args, **kwargs)
invenio_files_rest/views.py:354: in decorate
    return f(*args, **kwargs)
invenio_files_rest/views.py:309: in decorate
    return f(*args, **kwargs)
invenio_files_rest/views.py:970: in post
    return self.multipart_init(bucket, key)
.tox/c1/lib/python3.6/site-packages/webargs/core.py:455: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <invenio_files_rest.views.ObjectResource object at 0x7fe8e0aa3b00>
bucket = e3941495-d86f-436d-8515-99db8fb61a6a, key = 'mybigfile', size = 30
part_size = 21

    @use_kwargs(multipart_init_args)
    def multipart_init(self, bucket, key, size=None, part_size=None):
        """Initialize a multipart upload.
    
        :param bucket: The bucket (instance or id) to get the object from.
        :param key: The file key.
        :param size: The total size.
        :param part_size: The part size.
        :raises invenio_files_rest.errors.MissingQueryParameter: If size or
            part_size are not defined.
        :returns: A Flask response.
        """
        if size is None:
            raise MissingQueryParameter('size')
        if part_size is None:
            raise MissingQueryParameter('partSize')
        try:
            multipart = MultipartObject.create(bucket, key, size, part_size)
            db.session.commit()
        except Exception as e:
            db.session.rollback()
            current_app.logger.error(e)
        return self.make_response(
>           data=multipart,
            context={
                'class': MultipartObject,
                'bucket': bucket,
            }
        )
E       UnboundLocalError: local variable 'multipart' referenced before assignment

invenio_files_rest/views.py:830: UnboundLocalError
------------------------------ Captured log call -------------------------------
views.py                   828 ERROR    400 Bad Request: Invalid part size.
____________________________ test_post_size_limits _____________________________

client = <FlaskClient <Flask 'testapp'>>
db = <SQLAlchemy engine=postgresql+psycopg2://invenio:***@postgresql:5432/wekotest>
headers = {'Accept': '*/*', 'Content-Type': 'application/json'}
bucket = 1abf2616-036e-4b9a-9964-72b2abfa9465, admin_user = <User 1>

    def test_post_size_limits(client, db, headers, bucket, admin_user):
        """Test invalid multipart init."""
        login_user(client, admin_user)
    
        bucket.quota_size = 100
        db.session.commit()
    
        # Bucket quota exceed
        res = client.post(
            obj_url(bucket), query_string='uploads', headers=headers,
>           data=json.dumps({'size': 101, 'partSize': 20}))

tests/test_views_multipart.py:137: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask/views.py:89: in view
    return self.dispatch_request(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/invenio_rest/views.py:240: in dispatch_request
    *args, **kwargs
.tox/c1/lib/python3.6/site-packages/flask/views.py:163: in dispatch_request
    return meth(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/webargs/core.py:455: in wrapper
    return func(*args, **kwargs)
invenio_files_rest/views.py:285: in decorate
    return f(bucket=bucket, *args, **kwargs)
invenio_files_rest/views.py:354: in decorate
    return f(*args, **kwargs)
invenio_files_rest/views.py:309: in decorate
    return f(*args, **kwargs)
invenio_files_rest/views.py:970: in post
    return self.multipart_init(bucket, key)
.tox/c1/lib/python3.6/site-packages/webargs/core.py:455: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <invenio_files_rest.views.ObjectResource object at 0x7fe8e07d62b0>
bucket = 1abf2616-036e-4b9a-9964-72b2abfa9465, key = 'mybigfile', size = 101
part_size = 20

    @use_kwargs(multipart_init_args)
    def multipart_init(self, bucket, key, size=None, part_size=None):
        """Initialize a multipart upload.
    
        :param bucket: The bucket (instance or id) to get the object from.
        :param key: The file key.
        :param size: The total size.
        :param part_size: The part size.
        :raises invenio_files_rest.errors.MissingQueryParameter: If size or
            part_size are not defined.
        :returns: A Flask response.
        """
        if size is None:
            raise MissingQueryParameter('size')
        if part_size is None:
            raise MissingQueryParameter('partSize')
        try:
            multipart = MultipartObject.create(bucket, key, size, part_size)
            db.session.commit()
        except Exception as e:
            db.session.rollback()
            current_app.logger.error(e)
        return self.make_response(
>           data=multipart,
            context={
                'class': MultipartObject,
                'bucket': bucket,
            }
        )
E       UnboundLocalError: local variable 'multipart' referenced before assignment

invenio_files_rest/views.py:830: UnboundLocalError
------------------------------ Captured log call -------------------------------
views.py                   828 ERROR    400 Bad Request: Bucket quota exceeded.
___________________________ test_post_locked_bucket ____________________________

client = <FlaskClient <Flask 'testapp'>>
db = <SQLAlchemy engine=postgresql+psycopg2://invenio:***@postgresql:5432/wekotest>
headers = {'Accept': '*/*', 'Content-Type': 'application/json'}
bucket = 7642cd34-c6b4-431c-bf7d-2e820166bf71
get_json = <function get_json.<locals>.inner at 0x7fe8e0743950>
admin_user = <User 1>

    def test_post_locked_bucket(client, db, headers, bucket, get_json, admin_user):
        """Test invalid multipart init."""
        login_user(client, admin_user)
    
        bucket.locked = True
        db.session.commit()
    
        res = client.post(
            obj_url(bucket), query_string='uploads', headers=headers,
>           data=json.dumps({'size': 10, 'partSize': 2}))

tests/test_views_multipart.py:159: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask/views.py:89: in view
    return self.dispatch_request(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/invenio_rest/views.py:240: in dispatch_request
    *args, **kwargs
.tox/c1/lib/python3.6/site-packages/flask/views.py:163: in dispatch_request
    return meth(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/webargs/core.py:455: in wrapper
    return func(*args, **kwargs)
invenio_files_rest/views.py:285: in decorate
    return f(bucket=bucket, *args, **kwargs)
invenio_files_rest/views.py:354: in decorate
    return f(*args, **kwargs)
invenio_files_rest/views.py:309: in decorate
    return f(*args, **kwargs)
invenio_files_rest/views.py:970: in post
    return self.multipart_init(bucket, key)
.tox/c1/lib/python3.6/site-packages/webargs/core.py:455: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <invenio_files_rest.views.ObjectResource object at 0x7fe8e0655b00>
bucket = 7642cd34-c6b4-431c-bf7d-2e820166bf71, key = 'mybigfile', size = 10
part_size = 2

    @use_kwargs(multipart_init_args)
    def multipart_init(self, bucket, key, size=None, part_size=None):
        """Initialize a multipart upload.
    
        :param bucket: The bucket (instance or id) to get the object from.
        :param key: The file key.
        :param size: The total size.
        :param part_size: The part size.
        :raises invenio_files_rest.errors.MissingQueryParameter: If size or
            part_size are not defined.
        :returns: A Flask response.
        """
        if size is None:
            raise MissingQueryParameter('size')
        if part_size is None:
            raise MissingQueryParameter('partSize')
        try:
            multipart = MultipartObject.create(bucket, key, size, part_size)
            db.session.commit()
        except Exception as e:
            db.session.rollback()
            current_app.logger.error(e)
        return self.make_response(
>           data=multipart,
            context={
                'class': MultipartObject,
                'bucket': bucket,
            }
        )
E       UnboundLocalError: local variable 'multipart' referenced before assignment

invenio_files_rest/views.py:830: UnboundLocalError
------------------------------ Captured log call -------------------------------
views.py                   828 ERROR    403 Forbidden: Bucket is locked for modifications.
_____________________________ test_post_invalidkey _____________________________

client = <FlaskClient <Flask 'testapp'>>
db = <SQLAlchemy engine=postgresql+psycopg2://invenio:***@postgresql:5432/wekotest>
headers = {'Accept': '*/*', 'Content-Type': 'application/json'}
bucket = 61777b5b-09d8-4e9e-9ae5-8335805f5123, admin_user = <User 1>

    def test_post_invalidkey(client, db, headers, bucket, admin_user):
        """Test invalid multipart init."""
        login_user(client, admin_user)
    
        object_url = url_for(
            'invenio_files_rest.object_api',
            bucket_id=str(bucket.id),
            key='a' * 1025,
        ) + 'uploads'
    
        # Bucket quota exceed
        res = client.post(
            object_url, query_string='uploads', headers=headers,
>           data=json.dumps({'size': 50, 'partSize': 20}))

tests/test_views_multipart.py:184: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask/views.py:89: in view
    return self.dispatch_request(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/invenio_rest/views.py:240: in dispatch_request
    *args, **kwargs
.tox/c1/lib/python3.6/site-packages/flask/views.py:163: in dispatch_request
    return meth(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/webargs/core.py:455: in wrapper
    return func(*args, **kwargs)
invenio_files_rest/views.py:285: in decorate
    return f(bucket=bucket, *args, **kwargs)
invenio_files_rest/views.py:354: in decorate
    return f(*args, **kwargs)
invenio_files_rest/views.py:309: in decorate
    return f(*args, **kwargs)
invenio_files_rest/views.py:970: in post
    return self.multipart_init(bucket, key)
.tox/c1/lib/python3.6/site-packages/webargs/core.py:455: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <invenio_files_rest.views.ObjectResource object at 0x7fe8e1915630>
bucket = 61777b5b-09d8-4e9e-9ae5-8335805f5123
key = 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa...aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaauploads'
size = 50, part_size = 20

    @use_kwargs(multipart_init_args)
    def multipart_init(self, bucket, key, size=None, part_size=None):
        """Initialize a multipart upload.
    
        :param bucket: The bucket (instance or id) to get the object from.
        :param key: The file key.
        :param size: The total size.
        :param part_size: The part size.
        :raises invenio_files_rest.errors.MissingQueryParameter: If size or
            part_size are not defined.
        :returns: A Flask response.
        """
        if size is None:
            raise MissingQueryParameter('size')
        if part_size is None:
            raise MissingQueryParameter('partSize')
        try:
            multipart = MultipartObject.create(bucket, key, size, part_size)
            db.session.commit()
        except Exception as e:
            db.session.rollback()
            current_app.logger.error(e)
        return self.make_response(
>           data=multipart,
            context={
                'class': MultipartObject,
                'bucket': bucket,
            }
        )
E       UnboundLocalError: local variable 'multipart' referenced before assignment

invenio_files_rest/views.py:830: UnboundLocalError
------------------------------ Captured log call -------------------------------
views.py                   828 ERROR    400 Bad Request: Filename is too long.
___________________________________ test_put ___________________________________

client = <FlaskClient <Flask 'testapp'>>
db = <SQLAlchemy engine=postgresql+psycopg2://invenio:***@postgresql:5432/wekotest>
bucket = <[DetachedInstanceError("Instance <Bucket at 0x7fe8e05bc828> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)") raised in repr()] Bucket object at 0x7fe8e05bc828>
permissions = {None: None, 'auth': <User 1>, 'location': <User 2>, 'bucket': <User 3>, ...}
multipart = <[DetachedInstanceError("Instance <MultipartObject at 0x7fe8e05b5dd8> is not bound to a Session; attribute refresh ope... (Background on this error at: http://sqlalche.me/e/bhk3)") raised in repr()] MultipartObject object at 0x7fe8e05b5dd8>
multipart_url = 'http://invenio.org/files/ef9e956d-92ac-4cfe-8b67-be3eaf7ada82/mykey?uploadId=4021f845-9471-465a-b19f-deee335fb601'
get_sha256 = <function get_sha256.<locals>.inner at 0x7fe8e06898c8>
get_json = <function get_json.<locals>.inner at 0x7fe8e0649c80>

    def test_put(client, db, bucket, permissions, multipart, multipart_url,
                 get_sha256, get_json):
        """Test part upload."""
        cases = [
            (None, 404),
            ('auth', 404),
            ('objects', 404),  # TODO - use 403 instead
            ('bucket', 200),
            ('location', 200),
        ]
    
        for user, expected in cases:
>           login_user(client, permissions[user])

tests/test_views_multipart.py:200: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/testutils.py:26: in login_user
    sess['user_id'] = user.id if user else None
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7fe917caa4e0; User>
state = <sqlalchemy.orm.state.InstanceState object at 0x7fe8e05bc7b8>
attribute_names = {'active', 'confirmed_at', 'current_login_at', 'current_login_ip', 'email', 'id', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <User at 0x7fe8e05bca90> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
______________________________ test_put_badstream ______________________________

client = <FlaskClient <Flask 'testapp'>>
db = <SQLAlchemy engine=postgresql+psycopg2://invenio:***@postgresql:5432/wekotest>
bucket = <[DetachedInstanceError("Instance <Bucket at 0x7fe8dfe319b0> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)") raised in repr()] Bucket object at 0x7fe8dfe319b0>
multipart = <[DetachedInstanceError("Instance <MultipartObject at 0x7fe8dfe38fd0> is not bound to a Session; attribute refresh ope... (Background on this error at: http://sqlalche.me/e/bhk3)") raised in repr()] MultipartObject object at 0x7fe8dfe38fd0>
multipart_url = 'http://invenio.org/files/59691b6c-d842-4421-b365-34da136b19f5/mykey?uploadId=cde4805f-46e7-4d9d-90f3-d0ef35b9ac30'
get_json = <function get_json.<locals>.inner at 0x7fe8dfea9598>
admin_user = <User 1>

    def test_put_badstream(client, db, bucket, multipart, multipart_url, get_json,
                           admin_user):
        """Test uploading to a completed multipart upload."""
        login_user(client, admin_user)
    
        client.put(
            multipart_url + '&partNumber={0}'.format(1),
            input_stream=BytesIO(b'a' * multipart.chunk_size),
        )
    
        # Part exists
        data = get_json(client.get(multipart_url), code=200)
        assert len(data['parts']) == 1
    
        pytest.raises(
            ValueError,
            client.put,
            multipart_url + '&partNumber={0}'.format(1),
>           input_stream=BadBytesIO(b'b' * multipart.chunk_size),
        )

tests/test_views_multipart.py:320: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7fe91601a748; MultipartObject>
state = <sqlalchemy.orm.state.InstanceState object at 0x7fe8dfe38c88>
attribute_names = {'bucket_id', 'chunk_size', 'completed', 'created', 'file_id', 'key', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <MultipartObject at 0x7fe8dfe38fd0> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
___________________________________ test_get ___________________________________

client = <FlaskClient <Flask 'testapp'>>
db = <SQLAlchemy engine=postgresql+psycopg2://invenio:***@postgresql:5432/wekotest>
bucket = <[DetachedInstanceError("Instance <Bucket at 0x7fe8dfd32b70> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)") raised in repr()] Bucket object at 0x7fe8dfd32b70>
permissions = {None: None, 'auth': <User 1>, 'location': <User 2>, 'bucket': <User 3>, ...}
multipart = <[DetachedInstanceError("Instance <MultipartObject at 0x7fe8dfcca748> is not bound to a Session; attribute refresh ope... (Background on this error at: http://sqlalche.me/e/bhk3)") raised in repr()] MultipartObject object at 0x7fe8dfcca748>
multipart_url = 'http://invenio.org/files/227c62df-4b4e-482d-ad88-b2bd422d0846/mykey?uploadId=5b851b10-d911-474b-9843-53bbeb34656d'
get_json = <function get_json.<locals>.inner at 0x7fe8dfd63048>

    def test_get(client, db, bucket, permissions, multipart, multipart_url,
                 get_json):
        """Test get parts."""
        Part.create(multipart, 0)
        Part.create(multipart, 1)
        Part.create(multipart, 3)
        db.session.commit()
    
        cases = [
            (None, 404),
            ('auth', 404),
            ('objects', 404),
            ('bucket', 200),
            ('location', 200),
        ]
    
        for user, expected in cases:
>           login_user(client, permissions[user])

tests/test_views_multipart.py:346: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/testutils.py:26: in login_user
    sess['user_id'] = user.id if user else None
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7fe917caa4e0; User>
state = <sqlalchemy.orm.state.InstanceState object at 0x7fe8dfd3aa90>
attribute_names = {'active', 'confirmed_at', 'current_login_at', 'current_login_ip', 'email', 'id', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <User at 0x7fe8dfd3ad68> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
________________________ test_post_complete[bucket-200] ________________________

client = <FlaskClient <Flask 'testapp'>>
headers = {'Accept': '*/*', 'Content-Type': 'application/json'}
permissions = {None: None, 'auth': <User 1>, 'location': <User 2>, 'bucket': <User 3>, ...}
bucket = 9a985685-4628-492b-821c-1b2d86d9d35c
multipart = 9a985685-4628-492b-821c-1b2d86d9d35c:418333e1-e5ba-4d8a-b124-c12f133d7af0:mykey
multipart_url = 'http://invenio.org/files/9a985685-4628-492b-821c-1b2d86d9d35c/mykey?uploadId=418333e1-e5ba-4d8a-b124-c12f133d7af0'
parts = [<Part 418333e1-e5ba-4d8a-b124-c12f133d7af0, 0>, <Part 418333e1-e5ba-4d8a-b124-c12f133d7af0, 1>, <Part 418333e1-e5ba-4...-b124-c12f133d7af0, 3>, <Part 418333e1-e5ba-4d8a-b124-c12f133d7af0, 4>, <Part 418333e1-e5ba-4d8a-b124-c12f133d7af0, 5>]
get_json = <function get_json.<locals>.inner at 0x7fe8df5052f0>, user = 'bucket'
expected = 200

    @pytest.mark.parametrize('user, expected', [
        (None, 404),
        ('auth', 404),
        ('objects', 404),
        ('bucket', 200),
        ('location', 200),
    ])
    def test_post_complete(client, headers, permissions, bucket, multipart,
                           multipart_url, parts, get_json, user, expected):
        """Test complete multipart upload."""
        login_user(client, permissions[user])
    
        # Mock celery task to emulate real usage.
        def _mock_celery_result():
            yield False
            yield False
            merge_multipartobject(str(multipart.upload_id))
            yield True
    
        result_iter = _mock_celery_result()
    
        task_result = MagicMock()
        task_result.ready = MagicMock(side_effect=lambda *args: next(result_iter))
        task_result.successful = MagicMock(return_value=True)
    
        # Complete multipart upload
        with patch('invenio_files_rest.views.merge_multipartobject') as task:
            task.delay = MagicMock(return_value=task_result)
    
            res = client.post(multipart_url)
            assert res.status_code == expected
    
            if res.status_code == 200:
                data = get_json(res)
                assert data['completed'] is True
>               assert task.called_with(str(multipart.upload_id))

tests/test_views_multipart.py:428: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='merge_multipartobject' id='140638155432848'>
name = 'called_with'

    def __getattr__(self, name):
        if name in {'_mock_methods', '_mock_unsafe'}:
            raise AttributeError(name)
        elif self._mock_methods is not None:
            if name not in self._mock_methods or name in _all_magics:
                raise AttributeError("Mock object has no attribute %r" % name)
        elif _is_magic(name):
            raise AttributeError(name)
        if not self._mock_unsafe and (not self._mock_methods or name not in self._mock_methods):
            if name.startswith(('assert', 'assret', 'asert', 'aseert', 'assrt')) or name in _ATTRIB_DENY_LIST:
                raise AttributeError(
>                   f"{name!r} is not a valid assertion. Use a spec "
                    f"for the mock if {name!r} is meant to be an attribute.")
E               AttributeError: 'called_with' is not a valid assertion. Use a spec for the mock if 'called_with' is meant to be an attribute.

.tox/c1/lib/python3.6/site-packages/mock/mock.py:667: AttributeError
_______________________ test_post_complete[location-200] _______________________

client = <FlaskClient <Flask 'testapp'>>
headers = {'Accept': '*/*', 'Content-Type': 'application/json'}
permissions = {None: None, 'auth': <User 1>, 'location': <User 2>, 'bucket': <User 3>, ...}
bucket = 52c59f16-9f61-4087-bbc6-3ddc331f8721
multipart = 52c59f16-9f61-4087-bbc6-3ddc331f8721:e570a25f-f85f-4ef8-b438-4d3866d6d8cd:mykey
multipart_url = 'http://invenio.org/files/52c59f16-9f61-4087-bbc6-3ddc331f8721/mykey?uploadId=e570a25f-f85f-4ef8-b438-4d3866d6d8cd'
parts = [<Part e570a25f-f85f-4ef8-b438-4d3866d6d8cd, 0>, <Part e570a25f-f85f-4ef8-b438-4d3866d6d8cd, 1>, <Part e570a25f-f85f-4...-b438-4d3866d6d8cd, 3>, <Part e570a25f-f85f-4ef8-b438-4d3866d6d8cd, 4>, <Part e570a25f-f85f-4ef8-b438-4d3866d6d8cd, 5>]
get_json = <function get_json.<locals>.inner at 0x7fe8df2cd158>
user = 'location', expected = 200

    @pytest.mark.parametrize('user, expected', [
        (None, 404),
        ('auth', 404),
        ('objects', 404),
        ('bucket', 200),
        ('location', 200),
    ])
    def test_post_complete(client, headers, permissions, bucket, multipart,
                           multipart_url, parts, get_json, user, expected):
        """Test complete multipart upload."""
        login_user(client, permissions[user])
    
        # Mock celery task to emulate real usage.
        def _mock_celery_result():
            yield False
            yield False
            merge_multipartobject(str(multipart.upload_id))
            yield True
    
        result_iter = _mock_celery_result()
    
        task_result = MagicMock()
        task_result.ready = MagicMock(side_effect=lambda *args: next(result_iter))
        task_result.successful = MagicMock(return_value=True)
    
        # Complete multipart upload
        with patch('invenio_files_rest.views.merge_multipartobject') as task:
            task.delay = MagicMock(return_value=task_result)
    
            res = client.post(multipart_url)
            assert res.status_code == expected
    
            if res.status_code == 200:
                data = get_json(res)
                assert data['completed'] is True
>               assert task.called_with(str(multipart.upload_id))

tests/test_views_multipart.py:428: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='merge_multipartobject' id='140638153680096'>
name = 'called_with'

    def __getattr__(self, name):
        if name in {'_mock_methods', '_mock_unsafe'}:
            raise AttributeError(name)
        elif self._mock_methods is not None:
            if name not in self._mock_methods or name in _all_magics:
                raise AttributeError("Mock object has no attribute %r" % name)
        elif _is_magic(name):
            raise AttributeError(name)
        if not self._mock_unsafe and (not self._mock_methods or name not in self._mock_methods):
            if name.startswith(('assert', 'assret', 'asert', 'aseert', 'assrt')) or name in _ATTRIB_DENY_LIST:
                raise AttributeError(
>                   f"{name!r} is not a valid assertion. Use a spec "
                    f"for the mock if {name!r} is meant to be an attribute.")
E               AttributeError: 'called_with' is not a valid assertion. Use a spec for the mock if 'called_with' is meant to be an attribute.

.tox/c1/lib/python3.6/site-packages/mock/mock.py:667: AttributeError
_________________________________ test_delete __________________________________

client = <FlaskClient <Flask 'testapp'>>
db = <SQLAlchemy engine=postgresql+psycopg2://invenio:***@postgresql:5432/wekotest>
bucket = <[DetachedInstanceError("Instance <Bucket at 0x7fe8dedd0a58> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)") raised in repr()] Bucket object at 0x7fe8dedd0a58>
multipart = <[DetachedInstanceError("Instance <MultipartObject at 0x7fe8dedd7d68> is not bound to a Session; attribute refresh ope... (Background on this error at: http://sqlalche.me/e/bhk3)") raised in repr()] MultipartObject object at 0x7fe8dedd7d68>
multipart_url = 'http://invenio.org/files/5ae8ba81-0655-4a6e-8d33-ce3001c5e3cc/mykey?uploadId=f7c4867f-f267-4cc7-9e34-aeb26ee5c472'
permissions = {None: None, 'auth': <User 1>, 'location': <User 2>, 'bucket': <User 3>, ...}
parts = [<Part f7c4867f-f267-4cc7-9e34-aeb26ee5c472, 0>, <Part f7c4867f-f267-4cc7-9e34-aeb26ee5c472, 1>, <Part f7c4867f-f267-4...-9e34-aeb26ee5c472, 3>, <Part f7c4867f-f267-4cc7-9e34-aeb26ee5c472, 4>, <Part f7c4867f-f267-4cc7-9e34-aeb26ee5c472, 5>]
get_json = <function get_json.<locals>.inner at 0x7fe8dee4a9d8>

    def test_delete(client, db, bucket, multipart, multipart_url, permissions,
                    parts, get_json):
        """Test complete when parts are missing."""
        assert bucket.size == multipart.size
    
        cases = [
            (None, 404),
            ('auth', 404),
            ('objects', 404),
            ('bucket', 404),
            ('location', 204),
        ]
    
        for user, expected in cases:
>           login_user(client, permissions[user])

tests/test_views_multipart.py:513: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/testutils.py:26: in login_user
    sess['user_id'] = user.id if user else None
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7fe917caa4e0; User>
state = <sqlalchemy.orm.state.InstanceState object at 0x7fe8dedde080>
attribute_names = {'active', 'confirmed_at', 'current_login_at', 'current_login_ip', 'email', 'id', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <User at 0x7fe8dee50198> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
_____________________________ test_get_listuploads _____________________________

client = <FlaskClient <Flask 'testapp'>>
db = <SQLAlchemy engine=postgresql+psycopg2://invenio:***@postgresql:5432/wekotest>
bucket = <[DetachedInstanceError("Instance <Bucket at 0x7fe8de9749b0> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)") raised in repr()] Bucket object at 0x7fe8de9749b0>
multipart = <[DetachedInstanceError("Instance <MultipartObject at 0x7fe8de97bc88> is not bound to a Session; attribute refresh ope... (Background on this error at: http://sqlalche.me/e/bhk3)") raised in repr()] MultipartObject object at 0x7fe8de97bc88>
multipart_url = 'http://invenio.org/files/a44de9d2-8e09-49e5-b416-a65bff77e7e5/mykey?uploadId=6c5eeb99-ab0d-46c3-b992-706542f1aaf8'
permissions = {None: None, 'auth': <User 1>, 'location': <User 2>, 'bucket': <User 3>, ...}
parts = [<Part 6c5eeb99-ab0d-46c3-b992-706542f1aaf8, 0>, <Part 6c5eeb99-ab0d-46c3-b992-706542f1aaf8, 1>, <Part 6c5eeb99-ab0d-4...-b992-706542f1aaf8, 3>, <Part 6c5eeb99-ab0d-46c3-b992-706542f1aaf8, 4>, <Part 6c5eeb99-ab0d-46c3-b992-706542f1aaf8, 5>]
get_json = <function get_json.<locals>.inner at 0x7fe8de9eb8c8>

    def test_get_listuploads(client, db, bucket, multipart, multipart_url,
                             permissions, parts, get_json):
        """Test get list of multipart uploads in bucket."""
        cases = [
            (None, 404),
            ('auth', 404),
            ('objects', 404),
            ('bucket', 404),
            ('location', 200),
        ]
    
        for user, expected in cases:
>           login_user(client, permissions[user])

tests/test_views_multipart.py:554: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/testutils.py:26: in login_user
    sess['user_id'] = user.id if user else None
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7fe917caa4e0; User>
state = <sqlalchemy.orm.state.InstanceState object at 0x7fe8de906908>
attribute_names = {'active', 'confirmed_at', 'current_login_at', 'current_login_ip', 'email', 'id', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <User at 0x7fe8de95d668> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
_____________________ test_already_exhausted_input_stream ______________________

app = <Flask 'testapp'>, client = <FlaskClient <Flask 'testapp'>>
db = <SQLAlchemy engine=postgresql+psycopg2://invenio:***@postgresql:5432/wekotest>
bucket = 6c2c4940-7c89-4803-8595-ffe63db922ea, admin_user = <User 1>

    def test_already_exhausted_input_stream(app, client, db, bucket, admin_user):
        """Test server error when file stream is already read."""
        key = 'test.json'
        data = b'{"json": "file"}'
        object_url = url_for(
            'invenio_files_rest.object_api', bucket_id=bucket.id, key=key)
        # Add a new before request hook which reads the incoming request payload.
        # This simulates what happens when Sentry's raven-python library when it
        # reads the JSON payloads, breaking the upload of JSON files
        # (`application/json`).
    
        def consume_request_input_stream(*args):
            """Reads input stream object."""
            from flask import request
            request.data
    
        app.before_request(consume_request_input_stream)
        login_user(client, admin_user)
        resp = client.put(
            object_url,
            input_stream=BytesIO(data),
        )
>       assert resp.status_code == 400
E       assert 200 == 400
E         -200
E         +400

tests/test_views_multipart.py:585: AssertionError
------------------------------ Captured log call -------------------------------
views.py                   673 ERROR    400 Bad Request: File is smaller than expected.
__________________________________ test_post ___________________________________

client = <FlaskClient <Flask 'testapp'>>
headers = {'Accept': '*/*', 'Content-Type': 'application/json'}
permissions = {None: None, 'auth': <User 1>, 'location': <User 2>, 'bucket': <User 3>, ...}
bucket = <[DetachedInstanceError("Instance <Bucket at 0x7fe8ddc56a20> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)") raised in repr()] Bucket object at 0x7fe8ddc56a20>

    def test_post(client, headers, permissions, bucket):
        """Test ObjectResource view POST method."""
        cases = [
            (None, 404),
            ('auth', 404),
            ('bucket', 403),
            ('location', 403),
        ]
    
        key = 'file.pdf'
        data = b'mycontent'
    
        for user, expected in cases:
>           login_user(client, permissions[user])

tests/test_views_objectversion.py:214: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/testutils.py:26: in login_user
    sess['user_id'] = user.id if user else None
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7fe917caa4e0; User>
state = <sqlalchemy.orm.state.InstanceState object at 0x7fe8ddc56668>
attribute_names = {'active', 'confirmed_at', 'current_login_at', 'current_login_ip', 'email', 'id', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <User at 0x7fe8ddc56978> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
_____________________________ test_put_versioning ______________________________

client = <FlaskClient <Flask 'testapp'>>
bucket = <[DetachedInstanceError("Instance <Bucket at 0x7fe8dd08fb38> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)") raised in repr()] Bucket object at 0x7fe8dd08fb38>
permissions = {None: None, 'auth': <User 1>, 'location': <User 2>, 'bucket': <User 3>, ...}
get_json = <function get_json.<locals>.inner at 0x7fe8dd108048>

    def test_put_versioning(client, bucket, permissions, get_json):
        """Test versioning feature."""
        key = 'test.txt'
        files = [b'v1', b'v2']
        object_url = url_for(
            'invenio_files_rest.object_api', bucket_id=bucket.id, key=key)
    
        # Upload to same key twice
        login_user(client, permissions['location'])
        for f in files:
            resp = client.put(object_url, input_stream=BytesIO(f))
            assert resp.status_code == 200
    
        # Assert we have two versions
        resp = client.get(url_for(
            'invenio_files_rest.bucket_api',
>           bucket_id=bucket.id,
        ), query_string='versions=1')

tests/test_views_objectversion.py:287: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7fe91605d320; Bucket>
state = <sqlalchemy.orm.state.InstanceState object at 0x7fe8dd0967b8>
attribute_names = {'created', 'default_location', 'default_storage_class', 'deleted', 'id', 'locked', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <Bucket at 0x7fe8dd08fb38> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
_____________________________ test_put_invalid_key _____________________________

client = <FlaskClient <Flask 'testapp'>>
db = <SQLAlchemy engine=postgresql+psycopg2://invenio:***@postgresql:5432/wekotest>
bucket = efae8781-c0b0-410b-ad3b-e102f78f57ba, admin_user = <User 1>

    def test_put_invalid_key(client, db, bucket, admin_user):
        login_user(client, admin_user)
    
        """Test invalid key name."""
        key = 'a' * 2000
        object_url = url_for(
            'invenio_files_rest.object_api', bucket_id=bucket.id, key=key)
    
        # Test set limits.
>       resp = client.put(object_url, input_stream=BytesIO(b'test'))

tests/test_views_objectversion.py:340: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1049: in put
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask/views.py:89: in view
    return self.dispatch_request(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/invenio_rest/views.py:240: in dispatch_request
    *args, **kwargs
.tox/c1/lib/python3.6/site-packages/flask/views.py:163: in dispatch_request
    return meth(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/webargs/core.py:455: in wrapper
    return func(*args, **kwargs)
invenio_files_rest/views.py:285: in decorate
    return f(bucket=bucket, *args, **kwargs)
invenio_files_rest/views.py:354: in decorate
    return f(*args, **kwargs)
invenio_files_rest/views.py:994: in put
    replace_version_id=replace_version_id)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <invenio_files_rest.views.ObjectResource object at 0x7fe8dcd0bef0>
bucket = efae8781-c0b0-410b-ad3b-e102f78f57ba
key = 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa...aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
is_thumbnail = False, replace_version_id = None

    def create_object(self, bucket, key,
                      is_thumbnail=None, replace_version_id=None):
        """Create a new object.
    
        :param bucket: The bucket (instance or id) to get the object from.
        :param key: The file key.
        :param is_thumbnail: for thumbnail.
        :returns: A Flask response.
        """
        # Initial validation of size based on Content-Length.
        # User can tamper with Content-Length, so this is just an initial up
        # front check. The storage subsystem must validate the size limit as
        # well.
        stream, content_length, content_md5, tags = \
            current_files_rest.upload_factory()
    
        size_limit = bucket.size_limit
        location_limit = bucket.location.max_file_size
        if location_limit is not None:
            size_limit = min(size_limit, location_limit)
        if content_length and size_limit and content_length > size_limit:
            desc = 'File size limit exceeded.' \
                if isinstance(size_limit, int) else size_limit.reason
            current_app.logger.error(desc)
            raise FileSizeError(description=desc)
        if not _location_has_quota(bucket, content_length):
            desc = 'Location has no quota'
            current_app.logger.error(desc)
            raise FileSizeError(description=desc)
        try:
            obj = ObjectVersion.create(bucket, key, is_thumbnail=is_thumbnail)
            obj.set_contents(
                stream, size=content_length, size_limit=size_limit,
                replace_version_id=replace_version_id)
            # Check add tags
            if tags:
                for key, value in tags.items():
                    ObjectVersionTag.create(obj, key, value)
    
            db.session.commit()
        except Exception as e:
            db.session.rollback()
            current_app.logger.error(e)
    
        _response = self.make_response(
>           data=obj,
            context={
                'class': ObjectVersion,
                'bucket': bucket,
            },
            etag=obj.file.checksum
        )
E       UnboundLocalError: local variable 'obj' referenced before assignment

invenio_files_rest/views.py:676: UnboundLocalError
------------------------------ Captured log call -------------------------------
views.py                   673 ERROR    400 Bad Request: Filename is too long.
___________________________ test_put_deleted_locked ____________________________

client = <FlaskClient <Flask 'testapp'>>
db = <SQLAlchemy engine=postgresql+psycopg2://invenio:***@postgresql:5432/wekotest>
bucket = <[DetachedInstanceError("Instance <Bucket at 0x7fe8e8458cc0> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)") raised in repr()] Bucket object at 0x7fe8e8458cc0>
admin_user = <User 1>

    def test_put_deleted_locked(client, db, bucket, admin_user):
        """Test that file size errors are properly raised."""
        login_user(client, admin_user)
    
        object_url = url_for(
            'invenio_files_rest.object_api', bucket_id=bucket.id, key='test.txt')
    
        # Can upload
        resp = client.put(object_url, input_stream=BytesIO(b'test'))
        assert resp.status_code == 200
    
        # Locked bucket
        bucket.locked = True
        db.session.commit()
>       resp = client.put(object_url, input_stream=BytesIO(b'test'))

tests/test_views_objectversion.py:370: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1049: in put
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask/views.py:89: in view
    return self.dispatch_request(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/invenio_rest/views.py:240: in dispatch_request
    *args, **kwargs
.tox/c1/lib/python3.6/site-packages/flask/views.py:163: in dispatch_request
    return meth(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/webargs/core.py:455: in wrapper
    return func(*args, **kwargs)
invenio_files_rest/views.py:285: in decorate
    return f(bucket=bucket, *args, **kwargs)
invenio_files_rest/views.py:354: in decorate
    return f(*args, **kwargs)
invenio_files_rest/views.py:994: in put
    replace_version_id=replace_version_id)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <invenio_files_rest.views.ObjectResource object at 0x7fe8e84e5e48>
bucket = 48ccb8f0-6e18-44ed-8c62-58bf2619aafe, key = 'test.txt'
is_thumbnail = False, replace_version_id = None

    def create_object(self, bucket, key,
                      is_thumbnail=None, replace_version_id=None):
        """Create a new object.
    
        :param bucket: The bucket (instance or id) to get the object from.
        :param key: The file key.
        :param is_thumbnail: for thumbnail.
        :returns: A Flask response.
        """
        # Initial validation of size based on Content-Length.
        # User can tamper with Content-Length, so this is just an initial up
        # front check. The storage subsystem must validate the size limit as
        # well.
        stream, content_length, content_md5, tags = \
            current_files_rest.upload_factory()
    
        size_limit = bucket.size_limit
        location_limit = bucket.location.max_file_size
        if location_limit is not None:
            size_limit = min(size_limit, location_limit)
        if content_length and size_limit and content_length > size_limit:
            desc = 'File size limit exceeded.' \
                if isinstance(size_limit, int) else size_limit.reason
            current_app.logger.error(desc)
            raise FileSizeError(description=desc)
        if not _location_has_quota(bucket, content_length):
            desc = 'Location has no quota'
            current_app.logger.error(desc)
            raise FileSizeError(description=desc)
        try:
            obj = ObjectVersion.create(bucket, key, is_thumbnail=is_thumbnail)
            obj.set_contents(
                stream, size=content_length, size_limit=size_limit,
                replace_version_id=replace_version_id)
            # Check add tags
            if tags:
                for key, value in tags.items():
                    ObjectVersionTag.create(obj, key, value)
    
            db.session.commit()
        except Exception as e:
            db.session.rollback()
            current_app.logger.error(e)
    
        _response = self.make_response(
>           data=obj,
            context={
                'class': ObjectVersion,
                'bucket': bucket,
            },
            etag=obj.file.checksum
        )
E       UnboundLocalError: local variable 'obj' referenced before assignment

invenio_files_rest/views.py:676: UnboundLocalError
------------------------------ Captured log call -------------------------------
views.py                   673 ERROR    403 Forbidden: Bucket is locked for modifications.
________________________________ test_put_error ________________________________

client = <FlaskClient <Flask 'testapp'>>
bucket = aef32ae1-cdd3-48b3-88c8-87abc4305879, admin_user = <User 1>

    def test_put_error(client, bucket, admin_user):
        """Test upload - cancelled by user."""
        login_user(client, admin_user)
    
        object_url = url_for(
            'invenio_files_rest.object_api', bucket_id=bucket.id, key='test.txt')
    
        pytest.raises(
            ValueError,
            client.put,
            object_url,
>           input_stream=BadBytesIO(b'a' * 128)
        )
E       Failed: DID NOT RAISE <class 'ValueError'>

tests/test_views_objectversion.py:391: Failed
------------------------------ Captured log call -------------------------------
views.py                   673 ERROR    I/O operation on closed file.
_____________________________ test_put_header_tags _____________________________

app = <Flask 'testapp'>, client = <FlaskClient <Flask 'testapp'>>
bucket = 6800f0ac-e82a-4fc2-8bdf-1d58af206ff9
permissions = {None: None, 'auth': <User 1>, 'location': <User 2>, 'bucket': <User 3>, ...}
get_md5 = <function get_md5.<locals>.inner at 0x7fe8dc5559d8>
get_json = <function get_json.<locals>.inner at 0x7fe8dc555a60>

    def test_put_header_tags(app, client, bucket, permissions, get_md5, get_json):
        """Test upload of an object with tags in the headers."""
        key = 'test.txt'
        headers = {
            app.config['FILES_REST_FILE_TAGS_HEADER']: (
                'key1=val1;key2=val2;key3=val3')
        }
    
        login_user(client, permissions['bucket'])
        resp = client.put(
            url_for('invenio_files_rest.object_api', bucket_id=bucket.id, key=key),
            input_stream=BytesIO(b'updated_content'),
            headers=headers,
        )
        assert resp.status_code == 200
    
        tags = ObjectVersion.get(bucket, key).get_tags()
>       assert tags['key1'] == 'val1'
E       AssertionError: assert 'val1;key2=val2;key3=val3' == 'val1'
E         - val1;key2=val2;key3=val3
E         + val1

tests/test_views_objectversion.py:580: AssertionError
_________________________ test_put_header_invalid_tags _________________________

app = <Flask 'testapp'>, client = <FlaskClient <Flask 'testapp'>>
bucket = <[DetachedInstanceError("Instance <Bucket at 0x7fe8dc410278> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)") raised in repr()] Bucket object at 0x7fe8dc410278>
permissions = {None: None, 'auth': <User 1>, 'location': <User 2>, 'bucket': <User 3>, ...}
get_md5 = <function get_md5.<locals>.inner at 0x7fe8dc4637b8>
get_json = <function get_json.<locals>.inner at 0x7fe8dc463840>

    def test_put_header_invalid_tags(app, client, bucket, permissions, get_md5,
                                     get_json):
        """Test upload of an object with tags in the headers."""
        header_name = app.config['FILES_REST_FILE_TAGS_HEADER']
        invalid = [
            # We don't test zero-length values/keys, because they are filtered out
            # from parse_qsl
            ('a'*256, 'valid'),
            ('valid', 'b'*256),
        ]
    
        login_user(client, permissions['bucket'])
        # Invalid key or values
        for k, v in invalid:
            resp = client.put(
                url_for(
                    'invenio_files_rest.object_api', bucket_id=bucket.id, key='k'),
                input_stream=BytesIO(b'updated_content'),
                headers={header_name: '{}={}'.format(k, v)},
            )
            assert resp.status_code == 400
    
        # Duplicate key
        resp = client.put(
>           url_for('invenio_files_rest.object_api', bucket_id=bucket.id, key='k'),
            input_stream=BytesIO(b'updated_content'),
            headers={header_name: 'a=1&a=2'},
        )

tests/test_views_objectversion.py:609: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7fe91605d320; Bucket>
state = <sqlalchemy.orm.state.InstanceState object at 0x7fe8dc4102b0>
attribute_names = {'created', 'default_location', 'default_storage_class', 'deleted', 'id', 'locked', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <Bucket at 0x7fe8dc410278> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
=============================== warnings summary ===============================
tests/test_admin.py::test_admin_views
  /code/modules/invenio-files-rest/.tox/c1/lib/python3.6/site-packages/jsonpath_ng/ext/string.py:18: DeprecationWarning: invalid escape sequence \(
    SUB = re.compile("sub\(/(.*)/,\s+(.*)\)")

tests/test_admin.py::test_admin_views
  /code/modules/invenio-files-rest/.tox/c1/lib/python3.6/site-packages/jsonpath_ng/ext/string.py:19: DeprecationWarning: invalid escape sequence \(
    SPLIT = re.compile("split\((.),\s+(\d+),\s+(\d+|-1)\)")

tests/test_admin.py::test_admin_views
  /code/modules/invenio-files-rest/.tox/c1/lib/python3.6/site-packages/jsonpath_ng/ext/string.py:20: DeprecationWarning: invalid escape sequence \(
    STR = re.compile("str\(\)")

tests/test_admin.py::test_admin_views
  /code/modules/invenio-files-rest/.tox/c1/lib/python3.6/site-packages/citeproc/formatter/rst.py:8: DeprecationWarning: invalid escape sequence \*
    text = text.replace('*', '\*')

tests/test_admin.py::test_admin_views
  /code/modules/invenio-files-rest/.tox/c1/lib/python3.6/site-packages/citeproc/formatter/rst.py:9: DeprecationWarning: invalid escape sequence \`
    text = text.replace('`', '\`')

tests/test_admin.py::test_admin_views
  /code/modules/invenio-files-rest/.tox/c1/lib/python3.6/site-packages/citeproc/model.py:671: DeprecationWarning: invalid escape sequence \d
    m = re.search('\d+', first)

tests/test_admin.py::test_admin_views
  /code/modules/invenio-files-rest/.tox/c1/lib/python3.6/site-packages/citeproc/source/bibtex/bibtex.py:156: DeprecationWarning: invalid escape sequence \d
    RE_DAY = '(?P<day>\d+)'

tests/test_admin.py::test_admin_views
  /code/modules/invenio-files-rest/.tox/c1/lib/python3.6/site-packages/citeproc/source/bibtex/bibtex.py:157: DeprecationWarning: invalid escape sequence \w
    RE_MONTH = '(?P<month>\w+)'

tests/test_admin.py::test_admin_views
  /code/modules/invenio-files-rest/.tox/c1/bin/bagit.py:926: DeprecationWarning: invalid escape sequence \c
    """

tests/test_admin.py::test_admin_views
  /code/modules/invenio-files-rest/.tox/c1/lib/python3.6/site-packages/b2handle/clientcredentials.py:102: DeprecationWarning: invalid escape sequence \*
    '''

tests/test_admin.py::test_admin_views
  /code/modules/invenio-files-rest/.tox/c1/lib/python3.6/site-packages/b2handle/handleexceptions.py:128: DeprecationWarning: invalid escape sequence \s
    pat = re.compile('>[\s]+<')

tests/test_admin.py::test_admin_views
  /code/modules/invenio-files-rest/.tox/c1/lib/python3.6/site-packages/past/types/oldstr.py:33: DeprecationWarning: invalid escape sequence \d
    """

tests/test_admin.py::test_admin_views
  /code/modules/invenio-files-rest/.tox/c1/lib/python3.6/site-packages/b2handle/handleclient.py:177: DeprecationWarning: invalid escape sequence \*
    '''

tests/test_admin.py::test_admin_views
  /code/modules/invenio-files-rest/.tox/c1/lib/python3.6/site-packages/b2handle/handleclient.py:197: DeprecationWarning: invalid escape sequence \*
    '''

tests/test_admin.py::test_admin_views
  /code/modules/invenio-files-rest/.tox/c1/lib/python3.6/site-packages/b2handle/handleclient.py:230: DeprecationWarning: invalid escape sequence \*
    '''

tests/test_admin.py::test_admin_views
  /code/modules/invenio-files-rest/.tox/c1/lib/python3.6/site-packages/b2handle/handleclient.py:248: DeprecationWarning: invalid escape sequence \*
    '''

tests/test_admin.py::test_admin_views
  /code/modules/invenio-files-rest/.tox/c1/lib/python3.6/site-packages/sickle/utils.py:20: DeprecationWarning: invalid escape sequence \{
    return re.search('(\{.*\})', element.tag).group(1)

tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
tests/test_admin.py::test_admin_views
  /code/modules/invenio-files-rest/.tox/c1/lib/python3.6/site-packages/invenio_admin/ext.py:73: PendingDeprecationWarning: Usage of model and modelview kwargs are deprecated in favor of view_class, args and kwargs.
    PendingDeprecationWarning

tests/test_admin.py::test_admin_views
  /code/modules/invenio-files-rest/.tox/c1/lib/python3.6/site-packages/passlib/pwd.py:363: DeprecationWarning: invalid escape sequence \*
    """

tests/test_admin.py::test_admin_views
  /code/modules/invenio-files-rest/.tox/c1/lib/python3.6/site-packages/passlib/pwd.py:616: DeprecationWarning: invalid escape sequence \*
    """

tests/test_admin.py::test_admin_views
  /code/modules/invenio-files-rest/.tox/c1/lib/python3.6/site-packages/flask_admin/model/base.py:1416: UserWarning: Fields missing from ruleset: created_userId,created_date,updated_userId,updated_date
    warnings.warn(text)

tests/test_admin.py::test_admin_views
  /code/modules/invenio-files-rest/.tox/c1/lib/python3.6/site-packages/resync/w3c_datetime.py:105: DeprecationWarning: invalid escape sequence \d
    "(\d\d):(\d\d))$", s)

tests/test_admin.py::test_admin_views
  /code/modules/invenio-files-rest/.tox/c1/lib/python3.6/site-packages/resync/list_base_with_index.py:412: DeprecationWarning: invalid escape sequence \w
    return(re.match('file:', uri) or not re.match('\w{3,4}:', uri))

tests/test_admin.py::test_admin_views
  /code/modules/invenio-files-rest/.tox/c1/lib/python3.6/site-packages/resync/mapper.py:132: DeprecationWarning: invalid escape sequence \w
    path = re.sub('[^\w\-\.]', '_', path)

tests/test_admin.py::test_admin_views
  /code/modules/invenio-files-rest/.tox/c1/lib/python3.6/site-packages/resync/mapper.py:134: DeprecationWarning: invalid escape sequence \.
    path = re.sub('[_\.]+$', '', path)

tests/test_admin.py::test_admin_views
  /code/modules/invenio-files-rest/.tox/c1/lib/python3.6/site-packages/resync/mapper.py:135: DeprecationWarning: invalid escape sequence \.
    path = re.sub('^[_\.]+', '', path)

tests/test_admin.py::test_admin_views
  /code/modules/invenio-files-rest/.tox/c1/lib/python3.6/site-packages/resync/resource_list_builder.py:53: DeprecationWarning: invalid escape sequence \d
    self.exclude_files = ['sitemap\d{0,5}.xml']

-- Docs: https://docs.pytest.org/en/latest/warnings.html

---------- coverage: platform linux, python 3.6.15-final-0 -----------
Name                                     Stmts   Miss Branch BrPart  Cover
--------------------------------------------------------------------------
invenio_files_rest/__init__.py               6      0      0      0   100%
invenio_files_rest/admin.py                131     13     38      3    87%
invenio_files_rest/api.py                   22     14      2      0    33%
invenio_files_rest/app.py                    6      0      2      0   100%
invenio_files_rest/cli.py                   46     26      2      0    42%
invenio_files_rest/config.py                31      0      0      0   100%
invenio_files_rest/errors.py                66      4     44      1    95%
invenio_files_rest/ext.py                   54      1     20      2    96%
invenio_files_rest/formparser.py            18      4     10      1    75%
invenio_files_rest/helpers.py              108     24     46      5    72%
invenio_files_rest/limiters.py              27      0     14      0   100%
invenio_files_rest/models.py               658     67    180     11    88%
invenio_files_rest/permissions.py           53     13     18      2    65%
invenio_files_rest/proxies.py                7      0      4      0   100%
invenio_files_rest/serializer.py           141     12     48      6    87%
invenio_files_rest/signals.py                7      0      0      0   100%
invenio_files_rest/storage/__init__.py       5      0      0      0   100%
invenio_files_rest/storage/base.py          88      3     24      1    96%
invenio_files_rest/storage/pyfs.py         120     46     28      3    59%
invenio_files_rest/tasks.py                146     35     52      4    70%
invenio_files_rest/utils.py                 82     46     26      2    39%
invenio_files_rest/version.py                3      0      0      0   100%
invenio_files_rest/views.py                358    104    126     16    67%
invenio_files_rest/wrappers.py               6      0      2      0   100%
--------------------------------------------------------------------------
TOTAL                                     2189    412    686     57    78%
Coverage HTML written to dir htmlcov
Coverage XML written to file coverage.xml

=== 23 failed, 126 passed, 2 skipped, 52 warnings, 1 error in 659.64 seconds ===
ERROR: InvocationError for command /code/modules/invenio-files-rest/.tox/c1/bin/pytest --cov=invenio_files_rest tests -v --cov-branch --cov-report=term --cov-report=xml --cov-report=html --basetemp=/code/modules/invenio-files-rest/.tox/c1/tmp (exited with code 1)
___________________________________ summary ____________________________________
ERROR:   c1: commands failed
